Transform: AWS::Serverless-2016-10-31
Resources:
  OrderEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: OrderEventBus
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  SetOrderStarted:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SetOrderStarted
      CodeUri: src/setOrderStarted
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref OrdersTable
          TABLE_ARN: !GetAtt OrdersTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
  SetOrderStartedLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${SetOrderStarted}
  OrderStarted:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - orderservice
        detail-type:
          - orderStarted
      EventBusName: OrderEventBus
      Targets:
        - Id: !Ref SetOrderStarted
          Arn: !GetAtt SetOrderStarted.Arn
  OrderCompleted:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - orderservice
        detail-type:
          - orderCompleted
      EventBusName: OrderEventBus
      Targets:
        - Id: !Ref SetOrderComplete
          Arn: !GetAtt SetOrderComplete.Arn
  OrderStartedToSetOrderStartedPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SetOrderStarted.Arn
      Principal: !Sub events.${AWS::URLSuffix}
      SourceArn: !GetAtt OrderStarted.Arn
  SetOrderComplete:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SetOrderComplete
      CodeUri: src/setOrderComplete
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref OrdersTable
          TABLE_ARN: !GetAtt OrdersTable.Arn
          EVENTBUS: !Ref OrderEventBus
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
        - EventBridgePutEventsPolicy:
            EventBusName: OrderEventBus
  SetOrderCompleteLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${SetOrderComplete}
  OrderCompletedToSetOrderCompletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SetOrderComplete.Arn
      Principal: !Sub events.${AWS::URLSuffix}
      SourceArn: !GetAtt OrderCompleted.Arn
  DevStartOrder:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - dev
        detail-type:
          - startOrder
      EventBusName: OrderEventBus
      Targets:
        - Id: !Ref SimulateOrder
          Arn: !GetAtt SimulateOrder.Arn
  SimulateOrder:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SimulateOrder
      CodeUri: src/simulateOrder
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          EVENTBUS: !Ref OrderEventBus
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: OrderEventBus
  SimulateOrderLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${SimulateOrder}
  DevStartOrderToSimulateOrderPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SimulateOrder.Arn
      Principal: !Sub events.${AWS::URLSuffix}
      SourceArn: !GetAtt DevStartOrder.Arn
  WaitTimeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  WaitTimeFrontend:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: WaitTimeFrontend
      CodeUri: src/waitTimeFrontend
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref WaitTimeTable
          TABLE_ARN: !GetAtt WaitTimeTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WaitTimeTable
      FunctionUrlConfig:
        AuthType: NONE
  WaitTimeFrontendLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${WaitTimeFrontend}
  OrderDetailsStored:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - orderService
        detail-type:
          - orderDetailsStored
      Targets:
        - Id: !Ref RecordWaitTime
          Arn: !GetAtt RecordWaitTime.Arn
      EventBusName: OrderEventBus
  EveryTenMinutes:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: rate(10 minutes)
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt SimulateOrder.Arn
        RoleArn: !GetAtt EveryTenMinutesToSimulateOrderRole.Arn
  EveryTenMinutesToSimulateOrderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub scheduler.${AWS::URLSuffix}
          Action: sts:AssumeRole
          Condition:
            ArnLike:
              aws:SourceArn: !Sub
                - arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/*/${AWS::StackName}-${ResourceId}-*
                - ResourceId: EveryTenMinutes
      Policies:
        - PolicyName: StartExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt SimulateOrder.Arn
  RecordWaitTime:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: RecordWaitTime
      CodeUri: src/recordWaitTime
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref WaitTimeTable
          TABLE_ARN: !GetAtt WaitTimeTable.Arn
          EVENTBUS: !Ref OrderEventBus
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WaitTimeTable
        - EventBridgePutEventsPolicy:
            EventBusName: OrderEventBus
  RecordWaitTimeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${RecordWaitTime}
  OrderDetailsStoredToRecordWaitTimePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt RecordWaitTime.Arn
      Principal: !Sub events.${AWS::URLSuffix}
      SourceArn: !GetAtt OrderDetailsStored.Arn
Metadata:
  AWS::Composer::Groups:
    Group2:
      Label: DevelopmentTriggers
      Members:
        - DevStartOrder
        - SimulateOrder
        - EveryTenMinutes
    Group3:
      Label: ReportingService
      Members:
        - WaitTimeTable
        - WaitTimeFrontend
        - OrderDetailsStored
        - RecordWaitTime
    Group:
      Label: OrderService
      Members:
        - OrdersTable
        - OrderCompleted
        - OrderStarted
        - SetOrderStarted
        - SetOrderComplete